{
  "parser": "@typescript-eslint/parser",
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  "extends": [
    "airbnb-base",
    "airbnb-typescript",
    "eslint:recommended",
    "plugin:import/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:prettier/recommended",
    "prettier"
  ],
  "plugins": ["@typescript-eslint", "import", "prettier"],
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "ignorePatterns": ["node_modules", "dist"],
  "rules": {
    "no-debugger": "off",
    "no-console": ["error", { "allow": ["warn", "error"] }],
    "class-methods-use-this": "off",
    "import/extensions": "off",
    "import/prefer-default-export": "off",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-inferrable-types": "off",
    "prettier/prettier": ["error", { "endOfLine": "auto" }],
    "@typescript-eslint/no-namespace": [2, { "allowDeclarations": true }],
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "array"
      }
    ],
    "@typescript-eslint/explicit-member-accessibility": [
      "error",
      {
        "accessibility": "explicit",
        "overrides": {
          "accessors": "explicit",
          "constructors": "off",
          "methods": "explicit",
          "properties": "explicit",
          "parameterProperties": "explicit"
        }
      }
    ],
    "max-lines-per-function": ["error", 40],
    "@typescript-eslint/explicit-function-return-type": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "curly": ["error", "all"],
    "@typescript-eslint/lines-between-class-members": "off",
    "no-multi-spaces": "error", // Disallow multiple spaces
    "space-in-parens": "error", // Enforce consistent spacing inside parentheses
    "no-multiple-empty-lines": "error", // Disallow multiple empty lines
    "no-var": "error", // Require let or const instead of var
    "prefer-const": "error", // Require const declarations for variables that are never reassigned after declared
    "quotes": ["error", "single", { "allowTemplateLiterals": true }],
    "semi": ["error", "always"],
    "space-infix-ops": ["error", { "int32Hint": false }], // Требовать пробелы вокруг инфиксных операторов =/+/-
    "key-spacing": ["error", { "afterColon": true }]
  }
}
